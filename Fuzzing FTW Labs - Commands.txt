~~~ Blind Fuzzing with Radamsa ~~~


cd /opt/addressBook
make
./addressbook
./addressbook files/AddressBook.dat


echo "aaa" | radamsa
echo "aaa" | radamsa
echo "aaa" | radamsa


leafpad /opt/addressBook/rad.sh


while true
do
  radamsa /opt/addressBook/files/AddressBook.dat > /opt/addressBook/files/FuzzedBook.dat
  /opt/addressBook/addressbook /opt/addressBook/files/FuzzedBook.dat > /dev/null
  test $? -gt 127 && break
done


ulimit -c


ulimit -c unlimited
ulimit -c


sysctl kernel.core_pattern


echo core > /proc/sys/kernel/core_pattern


sysctl kernel.core_pattern


chmod +x rad.sh
/opt/addressBook/rad.sh




rm -f /opt/addressBook/files/FuzzedBook.dat
________________
~~~ Function Fuzzing with libFuzzer ~~~


cat /opt/FTS/tutorial/fuzz_me.cc


cd /opt
clang++ -g -fsanitize=address -fsanitize-coverage=trace-pc-guard FTS/tutorial/fuzz_me.cc libFuzzer.a


./a.out


cd /opt
./a.out crash-0eb8e4ed029b774d80f2b66408203801cb982a60


cd /opt/heartbleed
/opt/FTS/openssl-1.0.1f/build.sh
./openssl-1.0.1f




________________


~~~ File Fuzzing w/ AFL ~~~


cd /opt/addressBook
cp addressbook addressbook.original
ls
afl-gcc -I inc -O0 -z execstack -z norelro -fno-stack-protector -D_FORTIFY_SOURCE=0 -m32 -o addressbook.afl src/main.c


cd /opt/addressBook
afl-showmap -o /dev/null -- /opt/addressBook/addressbook.afl /opt/addressBook/files/AddressBook.dat


cd /opt/addressBook
mkdir -p /opt/addressBook/afl_out
mv /opt/addressBook/files /opt/addressBook/old_files
mkdir -p /opt/addressBook/files 
cp /opt/addressBook/old_files/AddressBook.dat /opt/addressBook/files/AddressBook.dat
afl-fuzz -i files -o afl_out ./addressbook.afl @@


ls -alF afl_out/crashes/
./addressbook.afl "afl_out/crashes/id:000000,sig:11,src:000000,op:flip1,pos:0" 


ls -alF /opt/tcpdump/tcpdump-4.9.0/corpuses


mkdir -p /opt/tcpdump/tcpdump-4.9.0/afl_cmin
cd /opt/tcpdump/tcpdump-4.9.0/
afl-cmin -i corpuses -o afl_cmin -- ./tcpdump -nr @@


mkdir -p /opt/tcpdump/tcpdump-4.9.0/afl_tmin
cd /opt/tcpdump/tcpdump-4.9.0/
afl-tmin -i afl_cmin/qi_local_GET_slashdot_redirect.pcap -o afl_tmin/qi_local_GET_slashdot_redirect.pcap -- ./tcpdump -nr @@


cd /opt/tcpdump/tcpdump-4.9.0/
mkdir -p /opt/tcpdump/tcpdump-4.9.0/afl_sync
afl-fuzz -i afl_tmin -o /opt/tcpdump/tcpdump-4.9.0/afl_sync -M fuzzer1 -- ./tcpdump -nr @@


cd /opt/tcpdump/tcpdump-4.9.0/
mkdir -p /opt/tcpdump/tcpdump-4.9.0/afl_sync
afl-fuzz -i afl_tmin -o /opt/tcpdump/tcpdump-4.9.0/afl_sync -S fuzzer2 -- ./tcpdump -nr @@






~~~ Network Fuzzing w/ BooFuzz ~~~


cd /opt/angrySpider
./angryspider.noflags


http://127.0.0.1:8080/


ulimit -c


ulimit -c unlimited
ulimit -c


sysctl kernel.core_pattern


mkdir -p /opt/boofuzzRuns/cores/
echo "kernel.core_pattern=/opt/boofuzzRuns/cores/%t.%e.%p.%h.core" >> /etc/sysctl.conf
sysctl -p
sysctl kernel.core_pattern
 
ls -alF /opt/boofuzzRuns/cores/


sleep 10 &
killall -SIGSEGV sleep
ls -alF /opt/boofuzzRuns/cores/


mkdir -p /opt/boofuzzRuns/procmons/
cd /opt/boofuzz
python process_monitor_unix.py -c /opt/boofuzzRuns/procmons/$(date +"%Y%m%d%H%M").procmon


mkdir -p /opt/boofuzzRuns/netmons/
cd /opt/boofuzz
cp network_monitor.py network_monitor_unix.py
python network_monitor_unix.py -d 2 -P /opt/boofuzzRuns/netmons/


netstat -nlptu


leafpad /opt/boofuzzRuns/patBrown.py




from boofuzz import *
from boofuzz import pedrpc
 
# User defined variables
targetIp_Str = '127.0.0.1'
targetPort_Int = 8080
 
procmonIp_Str = '127.0.0.1'
procmonPort_Int = 26002


procName_Str = 'angryspider.noflags'
procStartCmd_Str = '/opt/angrySpider/angryspider.noflags'
procStopCmd_Str = 'killall angryspider.noflags'


netmonIp_Str = '127.0.0.1'
netmonPort_Int = 26001


# Automatic defined variables
import time
time_Str = time.strftime("%Y%m%d%H%M%S")
print("time: " + time_Str)
 
sessionFileName_Str = time_Str + ".patBrown.session"
print("sessionFileName: " + sessionFileName_Str)
 
# BooFuzz defined variables
s_static = Static
s_delim  = Delim
s_string = String
 
sess = sessions.Session(session_filename=sessionFileName_Str, sleep_time=.25)
target = sessions.Target(SocketConnection(host=targetIp_Str, port=targetPort_Int))


# Optionally monitor the process for segfaults
'''
mkdir -p /opt/boofuzzRuns/procmons/
cd /opt/boofuzz
python process_monitor_unix.py -c /opt/boofuzzRuns/procmons/$(date +"%Y%m%d%H%M").procmon
'''
target.procmon = pedrpc.Client(procmonIp_Str, procmonPort_Int)
target.procmon_options = {"proc_name": procName_Str, "start_commands": [procStartCmd_Str], "stop_commands": [procStopCmd_Str]}


# Optionally enable pcap creation
'''
mkdir -p /opt/boofuzzRuns/netmons/
cd /opt/boofuzz
cp network_monitor.py network_monitor_unix.py
python network_monitor_unix.py -d 2 -P /opt/boofuzzRuns/netmons/
'''
#target.netmon = pedrpc.Client(netmonIp_Str, netmonPort_Int)


sess.add_target(target)
 
# Import HTTP BooFuzz Templates; Check out python files within /opt/boofuzz/requests for detials
import sys
sys.path.insert(0, '/opt/boofuzz/requests')
import http_get
# import http_header
# import http_post


# Connect & Fuzz
# s_get("example001") -> s_initialize("example001") inside /opt/boofuzz/requests/*.py files


print("session importing get requests")
sess.connect(sess.root, s_get("HTTP VERBS"))
sess.connect(sess.root, s_get("HTTP METHOD"))
sess.connect(sess.root, s_get("HTTP REQ"))


'''
print("session importing header requests")
sess.connect(sess.root, s_get("HTTP HEADER COOKIE"))
sess.connect(sess.root, s_get("HTTP HEADER CONTENTLENGTH"))
sess.connect(sess.root, s_get("HTTP HEADER CLOSE"))
sess.connect(sess.root, s_get("HTTP HEADER COOKIE"))
sess.connect(sess.root, s_get("HTTP HEADER AUTHORIZATION"))
sess.connect(sess.root, s_get("HTTP HEADER ACCEPT"))
sess.connect(sess.root, s_get("HTTP HEADER ACCEPTCHARSET"))
sess.connect(sess.root, s_get("HTTP HEADER ACCEPTDATETIME"))
sess.connect(sess.root, s_get("HTTP HEADER ACCEPTENCODING"))
sess.connect(sess.root, s_get("HTTP HEADER ACCEPTLANGUAGE"))
sess.connect(sess.root, s_get("HTTP HEADER AUTHORIZATION"))
sess.connect(sess.root, s_get("HTTP HEADER CACHECONTROL"))
sess.connect(sess.root, s_get("HTTP HEADER CLOSE"))
sess.connect(sess.root, s_get("HTTP HEADER CONTENTLENGTH"))
sess.connect(sess.root, s_get("HTTP HEADER CONTENTMD5"))
sess.connect(sess.root, s_get("HTTP HEADER COOKIE"))
sess.connect(sess.root, s_get("HTTP HEADER DATE"))
sess.connect(sess.root, s_get("HTTP HEADER DNT"))
sess.connect(sess.root, s_get("HTTP HEADER EXPECT"))
sess.connect(sess.root, s_get("HTTP HEADER FROM"))
sess.connect(sess.root, s_get("HTTP HEADER HOST"))
sess.connect(sess.root, s_get("HTTP HEADER IFMATCH"))
sess.connect(sess.root, s_get("HTTP HEADER IFMODIFIEDSINCE"))
sess.connect(sess.root, s_get("HTTP HEADER IFNONEMATCH"))
sess.connect(sess.root, s_get("HTTP HEADER IFRANGE"))
sess.connect(sess.root, s_get("HTTP HEADER IFUNMODIFIEDSINCE"))
sess.connect(sess.root, s_get("HTTP HEADER KEEPALIVE"))
sess.connect(sess.root, s_get("HTTP HEADER MAXFORWARDS"))
sess.connect(sess.root, s_get("HTTP HEADER PRAGMA"))
sess.connect(sess.root, s_get("HTTP HEADER PROXYAUTHORIZATION"))
sess.connect(sess.root, s_get("HTTP HEADER RANGE"))
sess.connect(sess.root, s_get("HTTP HEADER REFERER"))
sess.connect(sess.root, s_get("HTTP HEADER TE"))
sess.connect(sess.root, s_get("HTTP HEADER UPGRADE"))
sess.connect(sess.root, s_get("HTTP HEADER USERAGENT"))
sess.connect(sess.root, s_get("HTTP HEADER VIA"))
sess.connect(sess.root, s_get("HTTP HEADER WARNING"))
sess.connect(sess.root, s_get("HTTP HEADER XATTDEVICEID"))
sess.connect(sess.root, s_get("HTTP HEADER XDONOTTRACK"))
sess.connect(sess.root, s_get("HTTP HEADER XFORWARDEDFOR"))
sess.connect(sess.root, s_get("HTTP HEADER XREQUESTEDWITH"))
sess.connect(sess.root, s_get("HTTP HEADER XWAPPROFILE"))
'''


'''
print("session imported post requests")
sess.connect(sess.root, s_get("HTTP VERBS POST"))
sess.connect(sess.root, s_get("HTTP VERBS POST ALL"))
sess.connect(sess.root, s_get("HTTP VERBS POST REQ"))
'''


sess.fuzz()






cd /opt/boofuzzRuns
python patBrown.py


cd /opt/boofuzzRuns
python patBrown.py >> $(date +"%Y%m%d%H%M").patBrown.log 2>&1


cat /opt/boofuzzRuns/procmons/*.procmon
ls -alF /opt/boofuzzRuns/cores


cd /opt/angrySpider
./angryspider.noflags


burpsuite
firefox


http://127.0.0.1:8080/


python 3007.py




________________


~~~ API Fuzzing with Bradamsa ~~~




cd /opt/angrySpider
./angryspider.noflags


http://127.0.0.1:8080/
http://127.0.0.1:8080/etc/passwd
http://127.0.0.1:8080/etc/passwd?index=20
http://127.0.0.1:8080/etc/passwd?length=25
http://127.0.0.1:8080/etc/passwd?index=20&length=25